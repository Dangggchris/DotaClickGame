{"version":3,"sources":["components/NavBar/navbar.js","components/Score/Score.js","components/Jumbotron/Jumbotron.js","components/Card/Card.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","onClick","refresh","Score","console","log","score","children","highScore","Tron","Score_Score","Herocard","imageClick","id","name","alt","src","image","primaryAttr","mainRole","Wrapper","App","state","heroList","sort","Math","random","clickedHero","_this","setState","includes","alert","push","counter","_this2","this","Wrapper_Wrapper","navbar","Jumbotron","map","hero","Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7bc973ef.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n          <div className=\"col-6 text-center\">\n            Dota 2 Heroes Game\n          </div>\n          <div className=\"col-6 text-center\">\n            <button className=\"btn btn-dark\" onClick={() => props.refresh()}>Refresh</button>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;","import React from \"react\";\n\nfunction Score (props) {\n  console.log(props.score)\n  return (\n    <div className=\"col-12 text-center\">\n        <div className=\"header text-center\">\n          <div className=\"title\">{props.children}</div>\n          <div className=\"scores\">\n            Score: {props.score} | Highscore: {props.highScore}\n      </div>\n    </div>\n  </div>\n  )\n};\n\nexport default Score;","import React from \"react\";\nimport Score from \"../Score/Score\";\n\nfunction Tron (props) {\n  return (\n<div className=\"jumbotron jumbotron-fluid container-fluid\">\n  <div className=\"container\">\n    <h1 className=\"display-4 text-center\">Dota 2 Click Game</h1>\n    <p className=\"lead text-center\">Click a hero to earn points! Make sure not to click a duplicate or you lose!</p>\n    <Score score={props.score} highScore={props.highScore}/>\n  </div>\n</div>\n  );\n}\n\nexport default Tron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Herocard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.imageClick(props.id, props.name)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Primary Attribute:</strong> {props.primaryAttr}\n          </li>\n          <li>\n            <strong>Role:</strong> {props.mainRole}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Herocard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport Navbar from \"./components/NavBar/navbar\";\nimport Tron from \"./components/Jumbotron/Jumbotron\";\nimport Herocard from \"./components/Card/Card\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport heroList from \"./heroes.json\"\n\nclass App extends Component {\n\n  state = {\n    heroList: heroList.sort(() => 0.5 - Math.random()),\n    clickedHero: [],\n    score: 0,\n    highScore: 0\n  }\n\n  refresh = () => {\n    this.setState({\n      heroList: this.state.heroList.sort(() => 0.5 - Math.random()),\n      clickedHero: [],\n      score: 0,\n      highScore: 0\n    })\n  }\n\n  imageClick = (id) => {\n\n    console.log(id)\n    if(this.state.clickedHero.includes(id)){\n      this.setState({ clickedHero: [], score: 0});\n\n      alert(\"What a shame. You lost.\");\n    }else{\n      this.setState({score: this.state.score + 1})\n      this.state.clickedHero.push(id);\n      console.log(this.state.clickedHero);\n\n      if(this.state.score >= this.state.highScore){\n\n        this.setState({highScore: this.state.highScore + 1});\n      }\n    }\n\n    if (this.state.counter === 20) {\n      alert(\"You win!\");\n      this.setState({score: 0, clickedHero: []});\n    }\n\n    this.setState({heroList: this.state.heroList.sort(() => 0.5 - Math.random())});\n\n  }\n\n  render () {\n    return (\n      <Wrapper>\n        <Navbar refresh={this.refresh}/>\n        <Tron \n          score={this.state.score}\n          highScore={this.state.highScore}\n        />\n        <div>\n        <Wrapper>\n        {this.state.heroList.map(hero => (\n          <Herocard\n            id={hero.id}\n            key={hero.id}\n            name={hero.name}\n            image={hero.image}\n            primaryAttr={hero.primaryAttr}\n            mainRole={hero.mainRole}\n            imageClick={this.imageClick}\n          />\n        ))}\n      </Wrapper>\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}